{"version":3,"file":"react-location.production.min.js","sources":["../../../node_modules/@babel/runtime/helpers/esm/extends.js","../src/index.tsx"],"sourcesContent":["export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","import * as React from 'react'\n\nimport {\n  createHashHistory,\n  createBrowserHistory,\n  createMemoryHistory,\n  BrowserHistory,\n  MemoryHistory,\n  History,\n  HashHistory,\n} from 'history'\n\nexport { createHashHistory, createBrowserHistory, createMemoryHistory }\n\n// Types\n\ntype Timeout = ReturnType<typeof setTimeout>\n\ntype Maybe<T, TUnknown> = T extends {} ? T : TUnknown\n\nexport type DefaultGenerics = {\n  LoaderData: LoaderData<unknown>\n  Params: Params<string>\n  Search: Search<unknown>\n  RouteMeta: RouteMeta<unknown>\n}\n\nexport type PartialGenerics = Partial<DefaultGenerics>\n\nexport type MakeGenerics<TGenerics extends PartialGenerics> = TGenerics\n\nexport type Search<T> = Record<string, T>\nexport type Params<T> = Record<string, T>\nexport type LoaderData<T> = Record<string, T>\nexport type RouteMeta<T> = Record<string, T>\n\nexport type UseGeneric<\n  TGenerics extends PartialGenerics,\n  TGeneric extends keyof PartialGenerics,\n> = TGeneric extends 'LoaderData' | 'Search'\n  ? Partial<Maybe<TGenerics[TGeneric], DefaultGenerics[TGeneric]>>\n  : Maybe<TGenerics[TGeneric], DefaultGenerics[TGeneric]>\n\nexport type ReactLocationOptions = {\n  // The history object to be used internally by react-location\n  // A history will be created automatically if not provided.\n  history?: BrowserHistory | MemoryHistory | HashHistory\n  stringifySearch?: SearchSerializer\n  parseSearch?: SearchParser\n}\n\ntype SearchSerializer = (searchObj: Record<string, any>) => string\ntype SearchParser = (searchStr: string) => Record<string, any>\n\nexport type Updater<TResult> = TResult | ((prev?: TResult) => TResult)\n\nexport type Location<TGenerics extends PartialGenerics = DefaultGenerics> = {\n  href: string\n  pathname: string\n  search: UseGeneric<TGenerics, 'Search'>\n  searchStr: string\n  hash: string\n  key?: string\n  // nextAction?: 'push' | 'replace'\n}\n\nexport type Route<TGenerics extends PartialGenerics = DefaultGenerics> = {\n  // The path to match (relative to the nearest parent `Route` component or root basepath)\n  path?: string\n  // An ID to uniquely identify this route within its siblings. This is only required for routes that *only match on search* or if you have multiple routes with the same path\n  id?: string\n  // If true, this route will be matched as case-sensitive\n  caseSensitive?: boolean\n  // Either (1) an object that will be used to shallowly match the current location's search or (2) A function that receives the current search params and can return truthy if they are matched.\n  search?: SearchPredicate<UseGeneric<TGenerics, 'Search'>>\n  // The duration to wait during `loader` execution before showing the `pendingElement`\n  pendingMs?: number\n  // _If the `pendingElement` is shown_, the minimum duration for which it will be visible.\n  pendingMinMs?: number\n  // Search filters can be used to rewrite, persist, default and manipulate search params for link that\n  // point to their routes or child routes. See the \"basic\" example to see them in action.\n  searchFilters?: SearchFilter<TGenerics>[]\n  // An array of child routes\n  children?: Route<TGenerics>[]\n  // Route Loaders (see below) can be inline on the route, or resolved async\n} & RouteLoaders<TGenerics> & {\n    // If `import` is defined, this route can resolve its elements and loaders in a single asynchronous call\n    // This is particularly useful for code-splitting or module federation\n    import?: (opts: {\n      params: UseGeneric<TGenerics, 'Params'>\n      search: UseGeneric<TGenerics, 'Search'>\n    }) => Promise<RouteLoaders<TGenerics>>\n  }\n\nexport type RouteLoaders<TGenerics> = {\n  // The content to be rendered when the route is matched. If no element is provided, defaults to `<Outlet />`\n  element?: SyncOrAsyncElement<TGenerics>\n  // The content to be rendered when `loader` encounters an error\n  errorElement?: SyncOrAsyncElement<TGenerics>\n  // The content to be rendered when the duration of `loader` execution surpasses the `pendingMs` duration\n  pendingElement?: SyncOrAsyncElement<TGenerics>\n  // An asynchronous function responsible for preparing or fetching data for the route before it is rendered\n  loader?: LoaderFn<TGenerics>\n  // An integer of milliseconds representing how long data should be cached for the route\n  loaderMaxAge?: number\n  // Similar to React's useEffect hook, this function is called\n  // when moving from an inactive state to an active one. Likewise, when moving from\n  // an active to an inactive state, the return function (if provided) is called.\n  onMatch?: (\n    match: RouteMatch<TGenerics>,\n  ) => void | undefined | ((match: RouteMatch<TGenerics>) => void)\n  // This function is called when the route remains active from one transition to the next.\n  onTransition?: (match: RouteMatch<TGenerics>) => void\n  // An object of whatever you want! This object is accessible anywhere matches are.\n  meta?: UseGeneric<TGenerics, 'RouteMeta'>\n}\n\nexport type SearchFilter<TGenerics> = (\n  prev: UseGeneric<TGenerics, 'Search'>,\n  next: UseGeneric<TGenerics, 'Search'>,\n) => UseGeneric<TGenerics, 'Search'>\n\nexport type MatchLocation<TGenerics extends PartialGenerics = DefaultGenerics> =\n  {\n    to?: string | number | null\n    search?: SearchPredicate<UseGeneric<TGenerics, 'Search'>>\n    fuzzy?: boolean\n    caseSensitive?: boolean\n  }\n\nexport type SearchPredicate<TSearch> = (search: TSearch) => any\n\nexport type SyncOrAsyncElement<\n  TGenerics extends PartialGenerics = DefaultGenerics,\n> = React.ReactNode | AsyncElement<TGenerics>\n\nexport type AsyncElement<TGenerics extends PartialGenerics = DefaultGenerics> =\n  (opts: {\n    params: UseGeneric<TGenerics, 'Params'>\n  }) => Promise<React.ReactNode>\n\nexport type UnloadedMatch<TGenerics extends PartialGenerics = DefaultGenerics> =\n  {\n    id: string\n    route: Route<TGenerics>\n    pathname: string\n    params: UseGeneric<TGenerics, 'Params'>\n    search: UseGeneric<TGenerics, 'Search'>\n  }\n\nexport type LoaderFn<TGenerics extends PartialGenerics = DefaultGenerics> = (\n  routeMatch: RouteMatch<TGenerics>,\n  opts: LoaderFnOptions<TGenerics>,\n) => PromiseLike<UseGeneric<TGenerics, 'LoaderData'>>\n\nexport type LoaderFnOptions<\n  TGenerics extends PartialGenerics = DefaultGenerics,\n> = {\n  parentMatch?: RouteMatch<TGenerics>\n  dispatch: (event: LoaderDispatchEvent<TGenerics>) => void\n}\n\ntype PromiseLike<T> = Promise<T> | T\n\nexport type ListenerFn = () => void\n\nexport type Segment = {\n  type: 'pathname' | 'param' | 'wildcard'\n  value: string\n}\n\nexport type RouterProps<TGenerics extends PartialGenerics = DefaultGenerics> = {\n  // Children will default to `<Outlet />` if not provided\n  children?: React.ReactNode\n  location: ReactLocation<TGenerics>\n} & RouterOptions<TGenerics>\n\nexport type RouterOptions<TGenerics> = {\n  // An array of route objects to match\n  routes: Route<TGenerics>[]\n  basepath?: string\n  filterRoutes?: FilterRoutesFn\n  defaultLinkPreloadMaxAge?: number\n  defaultLoaderMaxAge?: number\n  useErrorBoundary?: boolean\n  defaultElement?: SyncOrAsyncElement<TGenerics>\n  defaultErrorElement?: SyncOrAsyncElement<TGenerics>\n  defaultPendingElement?: SyncOrAsyncElement<TGenerics>\n  defaultPendingMs?: number\n  defaultPendingMinMs?: number\n  caseSensitive?: boolean\n  // An array of route match objects that have been both _matched_ and _loaded_. See the [SRR](#ssr) section for more details\n  // snapshot?: RouterSnapshot<TGenerics>\n}\n\nexport type RouterSnapshot<TGenerics> = {\n  // matches: Partial<RouteMatch<TGenerics>>[]\n  location: Location<TGenerics>\n  matches: SnapshotRouteMatch<TGenerics>[]\n}\n\nexport type SnapshotRouteMatch<TGenerics> = {\n  id: string\n  ownData: UseGeneric<TGenerics, 'LoaderData'>\n}\n\nexport type BuildNextOptions<\n  TGenerics extends PartialGenerics = DefaultGenerics,\n> = {\n  to?: string | number | null\n  search?: true | Updater<UseGeneric<TGenerics, 'Search'>>\n  hash?: Updater<string>\n  from?: Partial<Location<TGenerics>>\n  key?: string\n  __searchFilters?: SearchFilter<TGenerics>[]\n}\n\nexport type NavigateOptions<TGenerics> = BuildNextOptions<TGenerics> & {\n  replace?: boolean\n  fromCurrent?: boolean\n}\n\nexport type PromptProps = {\n  message: string\n  when?: boolean | any\n  children?: React.ReactNode\n}\n\nexport type LinkProps<TGenerics extends PartialGenerics = DefaultGenerics> =\n  Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, 'href' | 'children'> & {\n    // The absolute or relative destination pathname\n    to?: string | number | null\n    // The new search object or a function to update it\n    search?: true | Updater<UseGeneric<TGenerics, 'Search'>>\n    // The new has string or a function to update it\n    hash?: Updater<string>\n    // Whether to replace the current history stack instead of pushing a new one\n    replace?: boolean\n    // A function that is passed the [Location API](#location-api) and returns additional props for the `active` state of this link. These props override other props passed to the link (`style`'s are merged, `className`'s are concatenated)\n    getActiveProps?: () => Record<string, any>\n    // Defaults to `{ exact: false, includeHash: false }`\n    activeOptions?: ActiveOptions\n    // If set, will preload the linked route on hover and cache it for this many milliseconds in hopes that the user will eventually navigate there.\n    preload?: number\n    // If true, will render the link without the href attribute\n    disabled?: boolean\n    // A custom ref prop because of this: https://stackoverflow.com/questions/58469229/react-with-typescript-generics-while-using-react-forwardref/58473012\n    _ref?: React.Ref<HTMLAnchorElement>\n    // If a function is pass as a child, it will be given the `isActive` boolean to aid in further styling on the element it returns\n    children?:\n      | React.ReactNode\n      | ((state: { isActive: boolean }) => React.ReactNode)\n  }\n\ntype ActiveOptions = {\n  exact?: boolean\n  includeHash?: boolean\n}\n\nexport type LinkPropsType<TGenerics extends PartialGenerics = DefaultGenerics> =\n  LinkProps<TGenerics>\n\nexport type LoaderDispatchEvent<\n  TGenerics extends PartialGenerics = DefaultGenerics,\n> =\n  | {\n      type: 'maxAge'\n      maxAge: number\n    }\n  | {\n      type: 'loading'\n    }\n  | {\n      type: 'resolve'\n      data: UseGeneric<TGenerics, 'LoaderData'>\n    }\n  | {\n      type: 'reject'\n      error: unknown\n    }\n\nexport type LoadRouteFn<TGenerics> = (\n  next: Location<TGenerics>,\n) => MatchLoader<TGenerics>\n\nexport type TransitionState<TGenerics> = {\n  location: Location<TGenerics>\n  matches: RouteMatch<TGenerics>[]\n}\n\nexport type FilterRoutesFn = <\n  TGenerics extends PartialGenerics = DefaultGenerics,\n>(\n  routes: Route<TGenerics>[],\n) => Route<TGenerics>[]\n\nexport type RouterPropsType<\n  TGenerics extends PartialGenerics = DefaultGenerics,\n> = RouterProps<TGenerics>\n\nexport type RouterType<TGenerics extends PartialGenerics = DefaultGenerics> = (\n  props: RouterProps<TGenerics>,\n) => JSX.Element\n\ntype Listener<TPayload> = (payload: TPayload) => void\n\n// Source\n\nconst LocationContext = React.createContext<ReactLocation<any>>(null!)\nconst MatchesContext = React.createContext<RouteMatch<any>[]>(null!)\nconst routerContext = React.createContext<{ router: RouterInstance<any> }>(\n  null!,\n)\n\n// Detect if we're in the DOM\nconst isDOM = Boolean(\n  typeof window !== 'undefined' &&\n    window.document &&\n    window.document.createElement,\n)\n\nconst useLayoutEffect = isDOM ? React.useLayoutEffect : React.useEffect\n\n// This is the default history object if none is defined\nconst createDefaultHistory = () =>\n  isDOM ? createBrowserHistory() : createMemoryHistory()\n\nclass Subscribable<TPayload = void> {\n  listeners: Listener<TPayload>[]\n\n  constructor() {\n    this.listeners = []\n  }\n\n  subscribe(listener: Listener<TPayload>): () => void {\n    this.listeners.push(listener as Listener<TPayload>)\n\n    return () => {\n      this.listeners = this.listeners.filter((x) => x !== listener)\n    }\n  }\n\n  notify(payload: TPayload): void {\n    this.listeners.forEach((listener) => listener(payload))\n  }\n}\n\nexport class ReactLocation<\n  TGenerics extends PartialGenerics = DefaultGenerics,\n> extends Subscribable {\n  history: BrowserHistory | MemoryHistory\n  stringifySearch: SearchSerializer\n  parseSearch: SearchParser\n\n  current: Location<TGenerics>\n  destroy: () => void\n  navigateTimeout?: Timeout\n  nextAction?: 'push' | 'replace'\n\n  //\n\n  isTransitioning: boolean = false\n\n  constructor(options?: ReactLocationOptions) {\n    super()\n    this.history = options?.history || createDefaultHistory()\n    this.stringifySearch = options?.stringifySearch ?? defaultStringifySearch\n    this.parseSearch = options?.parseSearch ?? defaultParseSearch\n\n    this.current = this.parseLocation(this.history.location)\n\n    this.destroy = this.history.listen((event) => {\n      this.current = this.parseLocation(event.location, this.current)\n      this.notify()\n    })\n  }\n\n  buildNext(\n    basepath: string = '/',\n    dest: BuildNextOptions<TGenerics> = {},\n  ): Location<TGenerics> {\n    const from = {\n      ...this.current,\n      ...dest.from,\n    }\n\n    const pathname = resolvePath(basepath, from.pathname, `${dest.to ?? '.'}`)\n\n    const updatedSearch =\n      (dest.search === true\n        ? from.search\n        : functionalUpdate(dest.search, from.search)) ?? {}\n\n    const filteredSearch = dest.__searchFilters?.length\n      ? dest.__searchFilters.reduce(\n          (prev, next) => next(prev, updatedSearch),\n          from.search,\n        )\n      : updatedSearch\n\n    const search = replaceEqualDeep(from.search, filteredSearch)\n\n    const searchStr = this.stringifySearch(search)\n    let hash = functionalUpdate(dest.hash, from.hash)\n    hash = hash ? `#${hash}` : ''\n\n    return {\n      pathname,\n      search,\n      searchStr,\n      hash,\n      href: `${pathname}${searchStr}${hash}`,\n      key: dest.key,\n    }\n  }\n\n  navigate(next: Location<TGenerics>, replace?: boolean): void {\n    this.current = next\n\n    if (this.navigateTimeout) clearTimeout(this.navigateTimeout)\n\n    let nextAction: 'push' | 'replace' = 'replace'\n\n    if (!this.nextAction) {\n      nextAction = replace ? 'replace' : 'push'\n    }\n\n    if (!replace) {\n      nextAction = 'push'\n    }\n\n    this.nextAction = nextAction\n\n    this.navigateTimeout = setTimeout(() => {\n      let nextAction = this.nextAction\n      delete this.nextAction\n\n      const isSameUrl =\n        this.parseLocation(this.history.location).href === this.current.href\n\n      if (isSameUrl && !this.current.key) {\n        nextAction = 'replace'\n      }\n\n      if (nextAction === 'replace') {\n        return this.history.replace({\n          pathname: this.current.pathname,\n          hash: this.current.hash,\n          search: this.current.searchStr,\n        })\n      }\n\n      return this.history.push({\n        pathname: this.current.pathname,\n        hash: this.current.hash,\n        search: this.current.searchStr,\n      })\n    }, 16)\n  }\n\n  parseLocation(\n    location: History['location'],\n    previousLocation?: Location<TGenerics>,\n  ): Location<TGenerics> {\n    const parsedSearch = this.parseSearch(location.search)\n\n    return {\n      pathname: location.pathname,\n      searchStr: location.search,\n      search: replaceEqualDeep(previousLocation?.search, parsedSearch),\n      hash: location.hash.split('#').reverse()[0] ?? '',\n      href: `${location.pathname}${location.search}${location.hash}`,\n      key: location.key,\n    }\n  }\n}\n\nexport type MatchesProviderProps<TGenerics> = {\n  value: RouteMatch<TGenerics>[]\n  children: React.ReactNode\n}\n\nexport function MatchesProvider<TGenerics>(\n  props: MatchesProviderProps<TGenerics>,\n) {\n  return <MatchesContext.Provider {...props} />\n}\n\nexport function Router<TGenerics extends PartialGenerics = DefaultGenerics>({\n  children,\n  location,\n  // snapshot,\n  ...rest\n}: RouterProps<TGenerics>) {\n  const routerRef = React.useRef<RouterInstance<TGenerics>>(null!)\n  if (!routerRef.current) {\n    routerRef.current = new RouterInstance<TGenerics>({\n      location,\n      // snapshot,\n      routes: rest.routes,\n    })\n  }\n  const router = routerRef.current\n\n  const [nonce, rerender] = React.useReducer(() => ({}), {})\n\n  router.update(rest)\n\n  useLayoutEffect(() => {\n    return router.subscribe(() => {\n      // microtask(() => {\n      rerender()\n      // })\n    })\n  }, [])\n\n  useLayoutEffect(() => {\n    return router.updateLocation(location.current).unsubscribe\n  }, [location.current.key])\n\n  const routerValue = React.useMemo(\n    () => ({\n      router,\n    }),\n    [nonce],\n  )\n\n  return (\n    <LocationContext.Provider value={location}>\n      <routerContext.Provider value={routerValue}>\n        <MatchesProvider value={[router.rootMatch!, ...router.state.matches]}>\n          {children ?? <Outlet />}\n        </MatchesProvider>\n      </routerContext.Provider>\n    </LocationContext.Provider>\n  )\n}\n\ntype RouterInstanceState<TGenerics> = {\n  state: TransitionState<TGenerics>\n  pending?: TransitionState<TGenerics>\n}\n\nexport class RouterInstance<\n  TGenerics extends PartialGenerics = DefaultGenerics,\n> extends Subscribable {\n  basepath?: string\n  rootMatch?: RouteMatch<TGenerics>\n  state: TransitionState<TGenerics>\n  pending?: TransitionState<TGenerics>\n  routes!: Route<TGenerics>[]\n  filterRoutes?: FilterRoutesFn\n  defaultLinkPreloadMaxAge?: number\n  defaultLoaderMaxAge?: number\n  useErrorBoundary?: boolean\n  defaultElement: SyncOrAsyncElement<TGenerics>\n  defaultErrorElement: SyncOrAsyncElement<TGenerics>\n  defaultPendingElement: SyncOrAsyncElement<TGenerics>\n  defaultPendingMs?: number\n  defaultPendingMinMs?: number\n  caseSensitive?: boolean\n\n  routesById: Record<string, Route<TGenerics>> = {}\n\n  constructor({\n    location,\n    // snapshot,\n    ...rest\n  }: {\n    location: ReactLocation<TGenerics>\n    // snapshot?: RouterSnapshot<TGenerics>\n  } & RouterOptions<TGenerics>) {\n    super()\n\n    this.update(rest)\n\n    // if (snapshot) {\n    //   const matchLoader = new MatchLoader(this, location.current)\n    //   matchLoader.matches.forEach((match, index) => {\n    //     if (match.id !== snapshot.matches[index]?.id) {\n    //       throw new Error(\n    //         `Router hydration mismatch: ${match.id} !== ${snapshot.matches[index]?.id}`,\n    //       )\n    //     }\n    //     match.ownData = snapshot.matches[index]?.ownData ?? {}\n    //   })\n    //   cascadeMatchData(matchLoader.matches)\n    // }\n\n    this.state = {\n      // location: snapshot?.location ?? location.current,\n      // matches: matchLoader.matches,\n      location: location.current,\n      matches: [],\n    }\n\n    location.subscribe(() => this.notify())\n  }\n\n  update = ({ basepath, routes, ...opts }: RouterOptions<TGenerics>) => {\n    Object.assign(this, opts)\n\n    this.basepath = cleanPath(`/${basepath ?? ''}`)\n\n    this.routesById = {}\n\n    const recurseRoutes = (\n      routes: Route<TGenerics>[],\n      parent?: Route<TGenerics>,\n    ): Route<TGenerics>[] => {\n      return routes.map((route) => {\n        const path = route.path ?? '*'\n\n        const id = joinPaths([\n          parent?.id === 'root' ? '' : parent?.id,\n          `${path?.replace(/(.)\\/$/, '$1')}${route.id ? `-${route.id}` : ''}`,\n        ])\n\n        route = {\n          ...route,\n          pendingMs: route.pendingMs ?? opts?.defaultPendingMs,\n          pendingMinMs: route.pendingMinMs ?? opts?.defaultPendingMinMs,\n          id,\n        }\n\n        if (this.routesById[id]) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.warn('Duplicate routes found:', this.routesById[id], route)\n          }\n          throw new Error()\n        }\n\n        this.routesById[id] = route\n\n        route.children = route.children?.length\n          ? recurseRoutes(route.children, route)\n          : undefined\n\n        return route\n      })\n    }\n\n    this.routes = recurseRoutes(routes)\n\n    this.rootMatch = {\n      id: 'root',\n      params: {} as any,\n      search: {} as any,\n      pathname: this.basepath,\n      route: null!,\n      ownData: {},\n      data: {},\n      isLoading: false,\n      status: 'resolved',\n    }\n  }\n\n  setState = (\n    updater: (\n      old: RouterInstanceState<TGenerics>,\n    ) => RouterInstanceState<TGenerics>,\n  ) => {\n    const newState = updater({ state: this.state, pending: this.pending })\n    this.state = newState.state\n    this.pending = newState.pending\n    this.cleanMatchCache()\n    this.notify()\n  }\n\n  matchCache: Record<string, RouteMatch<TGenerics>> = {}\n\n  cleanMatchCache = () => {\n    const activeMatchIds = [\n      ...(this?.state.matches ?? []),\n      ...(this?.pending?.matches ?? []),\n    ].map((d) => d.id)\n\n    Object.values(this.matchCache).forEach((match) => {\n      if (!match.updatedAt) {\n        return\n      }\n\n      if (activeMatchIds.includes(match.id)) {\n        return\n      }\n\n      const age = Date.now() - (match.updatedAt ?? 0)\n\n      if (!match.maxAge || age > match.maxAge) {\n        delete this.matchCache[match.id]\n      }\n    })\n  }\n\n  updateLocation = (next: Location<TGenerics>) => {\n    let unsubscribe: () => void\n\n    const promise = new Promise<void>((resolve) => {\n      const matchLoader = new MatchLoader(this, next)\n\n      this.setState((old) => {\n        return {\n          ...old,\n          pending: {\n            location: matchLoader.location,\n            matches: matchLoader.matches,\n          },\n        }\n      })\n\n      unsubscribe = matchLoader.subscribe(() => {\n        const currentMatches = this.state.matches\n\n        currentMatches\n          .filter((d) => {\n            return !matchLoader.matches.find((dd) => dd.id === d.id)\n          })\n          .forEach((d) => {\n            d.onExit?.(d)\n          })\n\n        currentMatches\n          .filter((d) => {\n            return matchLoader.matches.find((dd) => dd.id === d.id)\n          })\n          .forEach((d) => {\n            d.route.onTransition?.(d)\n          })\n\n        matchLoader.matches\n          .filter((d) => {\n            return !currentMatches.find((dd) => dd.id === d.id)\n          })\n          .forEach((d) => {\n            d.onExit = d.route.onMatch?.(d)\n          })\n\n        this.setState((old) => {\n          return {\n            ...old,\n            state: {\n              location: matchLoader.location,\n              matches: matchLoader.matches,\n            },\n            pending: undefined,\n          }\n        })\n\n        resolve()\n      })\n\n      matchLoader.loadData()\n      matchLoader.startPending()\n    })\n\n    return {\n      promise,\n      unsubscribe: unsubscribe!,\n    }\n  }\n\n  // snapshot = (): RouterSnapshot<TGenerics> => {\n  //   return {\n  //     location: this.state.location,\n  //     matches: this.state.matches.map(({ ownData, id }) => {\n  //       return {\n  //         id,\n  //         ownData,\n  //       }\n  //     }),\n  //   }\n  // }\n}\n\nexport type UseLocationType<\n  TGenerics extends PartialGenerics = DefaultGenerics,\n> = () => ReactLocation<TGenerics>\n\nexport function useLocation<\n  TGenerics extends PartialGenerics = DefaultGenerics,\n>(): ReactLocation<TGenerics> {\n  const getIsMounted = useGetIsMounted()\n  const [, rerender] = React.useReducer((d) => d + 1, 0)\n  const instance = React.useContext(LocationContext) as ReactLocation<TGenerics>\n  warning(!!instance, 'useLocation must be used within a <ReactLocation />')\n\n  useLayoutEffect(() => {\n    return instance.subscribe(() => {\n      // Rerender all subscribers in a microtask\n      Promise.resolve().then(() => {\n        setTimeout(function renderAllLocationSubscribers() {\n          if (getIsMounted()) {\n            rerender()\n          }\n        }, 0)\n      })\n    })\n  }, [instance])\n\n  return instance\n}\n\nexport class RouteMatch<TGenerics extends PartialGenerics = DefaultGenerics> {\n  id!: string\n  route!: Route<TGenerics>\n  pathname!: string\n  params!: UseGeneric<TGenerics, 'Params'>\n  search!: UseGeneric<TGenerics, 'Search'>\n  updatedAt?: number\n  element?: React.ReactNode\n  errorElement?: React.ReactNode\n  pendingElement?: React.ReactNode\n  error?: unknown\n  loaderPromise?: Promise<UseGeneric<TGenerics, 'LoaderData'>>\n  maxAge?: number\n  matchLoader?: MatchLoader<TGenerics>\n  pendingTimeout?: Timeout\n  pendingMinPromise?: Promise<void>\n  onExit?: void | ((match: RouteMatch<TGenerics>) => void)\n\n  constructor(unloadedMatch: UnloadedMatch<TGenerics>) {\n    Object.assign(this, unloadedMatch)\n  }\n\n  status: 'pending' | 'resolved' | 'rejected' = 'pending'\n  ownData: UseGeneric<TGenerics, 'LoaderData'> = {}\n  data: UseGeneric<TGenerics, 'LoaderData'> = {}\n  isLoading: boolean = false\n\n  private notify? = (isSoft?: boolean) => {\n    this.matchLoader?.notify(isSoft)\n  }\n\n  assignMatchLoader? = (matchLoader: MatchLoader<TGenerics>) => {\n    this.matchLoader = matchLoader\n  }\n\n  startPending? = () => {\n    if (this.pendingTimeout) {\n      clearTimeout(this.pendingTimeout)\n    }\n\n    if (this.route.pendingMs) {\n      this.pendingTimeout = setTimeout(() => {\n        this.notify?.()\n        if (typeof this.route.pendingMinMs !== 'undefined') {\n          this.pendingMinPromise = new Promise((r) =>\n            setTimeout(r, this.route.pendingMinMs),\n          )\n        }\n      }, this.route.pendingMs)\n    }\n  }\n\n  load? = (opts: {\n    maxAge?: number\n    parentMatch?: RouteMatch<TGenerics>\n    router: RouterInstance<TGenerics>\n  }) => {\n    this.maxAge =\n      opts.maxAge ?? this.route.loaderMaxAge ?? opts.router.defaultLoaderMaxAge\n\n    if (this.loaderPromise) {\n      return\n    }\n\n    const importer = this.route.import\n\n    // First, run any importers\n    this.loaderPromise = (\n      !importer\n        ? Promise.resolve()\n        : importer({ params: this.params, search: this.search }).then(\n            (imported) => {\n              this.route = {\n                ...this.route,\n                ...imported,\n              }\n            },\n          )\n    )\n      // then run all element and data loaders in parallel\n      .then(() => {\n        const elementPromises: Promise<void>[] = []\n\n        // For each element type, potentially load it asynchronously\n        const elementTypes = [\n          'element',\n          'errorElement',\n          'pendingElement',\n        ] as const\n\n        elementTypes.forEach((type) => {\n          const routeElement = this.route[type]\n\n          if (this[type]) {\n            return\n          }\n\n          if (typeof routeElement === 'function') {\n            elementPromises.push(\n              (routeElement as AsyncElement)(this).then((res) => {\n                this[type] = res\n              }),\n            )\n          } else {\n            this[type] = this.route[type]\n          }\n        })\n\n        const loader = this.route.loader\n\n        const dataPromise = !loader\n          ? Promise.resolve().then(() => {\n              this.status = 'resolved'\n            })\n          : new Promise(async (resolveLoader, rejectLoader) => {\n              let pendingTimeout: Timeout\n\n              const resolve = (data: any) => {\n                this.status = 'resolved'\n                this.ownData = data\n                this.error = undefined\n              }\n\n              const reject = (err: any) => {\n                console.error(err)\n                this.status = 'rejected'\n                this.error = err\n                rejectLoader(err)\n              }\n\n              const finish = () => {\n                this.isLoading = false\n                this.startPending = undefined\n                clearTimeout(pendingTimeout)\n                resolveLoader(this.ownData)\n              }\n\n              try {\n                this.isLoading = true\n\n                resolve(\n                  await loader(this, {\n                    parentMatch: opts.parentMatch,\n                    dispatch: async (event) => {\n                      if (event.type === 'resolve') {\n                        resolve(event.data)\n                      } else if (event.type === 'reject') {\n                        reject(event.error)\n                      } else if (event.type === 'loading') {\n                        this.isLoading = true\n                      } else if (event.type === 'maxAge') {\n                        this.maxAge = event.maxAge\n                      }\n\n                      this.updatedAt = Date.now()\n\n                      this.notify?.(true)\n                    },\n                  }),\n                )\n                await this.pendingMinPromise\n                finish()\n              } catch (err) {\n                reject(err)\n                finish()\n              }\n            })\n\n        return Promise.all([...elementPromises, dataPromise]).then(() => {\n          this.updatedAt = Date.now()\n        })\n      })\n      .then(() => {\n        return this.ownData\n      })\n  }\n}\n\nclass MatchLoader<\n  TGenerics extends PartialGenerics = DefaultGenerics,\n> extends Subscribable<undefined | boolean> {\n  router: RouterInstance<TGenerics>\n  location: Location<TGenerics>\n  matches: RouteMatch<TGenerics>[]\n  prepPromise?: Promise<void>\n  matchPromise?: Promise<UnloadedMatch<TGenerics>[]>\n  firstRenderPromises?: Promise<any>[]\n\n  constructor(\n    router: RouterInstance<TGenerics>,\n    nextLocation: Location<TGenerics>,\n  ) {\n    super()\n    this.router = router\n    this.location = nextLocation\n    this.matches = []\n\n    const unloadedMatches = matchRoutes(this.router, this.location)\n\n    this.matches = unloadedMatches?.map(\n      (unloadedMatch): RouteMatch<TGenerics> => {\n        if (!this.router.matchCache[unloadedMatch.id]) {\n          this.router.matchCache[unloadedMatch.id] = new RouteMatch(\n            unloadedMatch,\n          )\n        }\n\n        return this.router.matchCache[unloadedMatch.id]!\n      },\n    )\n  }\n\n  status: 'pending' | 'resolved' = 'pending'\n\n  preNotify = (isSoft?: boolean) => {\n    if (this.status === 'pending' && isSoft) {\n      return\n    }\n\n    this.status = 'resolved'\n    cascadeMatchData(this.matches)\n    this.notify(false)\n  }\n\n  loadData = async ({ maxAge }: { maxAge?: number } = {}) => {\n    this.router.cleanMatchCache()\n\n    if (!this.matches?.length) {\n      this.preNotify()\n      return\n    }\n\n    this.firstRenderPromises = []\n\n    this.matches.forEach((match, index) => {\n      const parentMatch = this.matches?.[index - 1]\n      match.assignMatchLoader?.(this)\n      match.load?.({ maxAge, parentMatch, router: this.router })\n      this.firstRenderPromises?.push(match.loaderPromise!)\n    })\n\n    return await Promise.all(this.firstRenderPromises).then(() => {\n      this.preNotify()\n      return this.matches\n    })\n  }\n\n  load = async ({ maxAge }: { maxAge?: number } = {}) => {\n    return await this.loadData({ maxAge })\n  }\n\n  startPending = async () => {\n    this.matches.forEach((match) => match.startPending?.())\n  }\n}\n\nfunction cascadeMatchData<TGenerics>(matches?: RouteMatch<TGenerics>[]) {\n  matches?.forEach((match, index) => {\n    const parentMatch = matches?.[index - 1]\n\n    match.data = {\n      ...(parentMatch?.data ?? ({} as any)),\n      ...match.ownData,\n    }\n  })\n}\n\nexport type UseRouterType<TGenerics extends PartialGenerics = DefaultGenerics> =\n  () => RouterInstance<TGenerics>\n\nexport function useRouter<\n  TGenerics extends PartialGenerics = DefaultGenerics,\n>(): RouterInstance<TGenerics> {\n  const value = React.useContext(routerContext)\n  if (!value) {\n    warning(true, 'You are trying to use useRouter() outside of ReactLocation!')\n    throw new Error()\n  }\n\n  return value.router as RouterInstance<TGenerics>\n}\n\nexport interface MatchRoutesOptions<TGenerics> {\n  filterRoutes?: FilterRoutesFn\n  defaultPendingMs?: number\n  defaultPendingMinMs?: number\n  defaultElement?: SyncOrAsyncElement<TGenerics>\n  defaultErrorElement?: SyncOrAsyncElement<TGenerics>\n  defaultPendingElement?: SyncOrAsyncElement<TGenerics>\n}\n\nexport type MatchRoutesType<\n  TGenerics extends PartialGenerics = DefaultGenerics,\n> = (\n  router: RouterInstance<TGenerics>[],\n  currentLocation: Location<TGenerics>,\n) => Promise<UnloadedMatch<TGenerics>[]>\n\nexport function matchRoutes<\n  TGenerics extends PartialGenerics = DefaultGenerics,\n>(\n  router: RouterInstance<TGenerics>,\n  currentLocation: Location<TGenerics>,\n): UnloadedMatch<TGenerics>[] {\n  if (!router.routes.length) {\n    return []\n  }\n\n  const matches: UnloadedMatch<TGenerics>[] = []\n\n  const recurse = async (\n    routes: Route<TGenerics>[],\n    parentMatch: UnloadedMatch<TGenerics>,\n  ): Promise<void> => {\n    let { pathname, params } = parentMatch\n    const filteredRoutes = router?.filterRoutes\n      ? router?.filterRoutes(routes)\n      : routes\n\n    const route = filteredRoutes.find((route) => {\n      const fullRoutePathName = joinPaths([pathname, route.path])\n\n      const fuzzy = !!(route.path !== '/' || route.children?.length)\n\n      const matchParams = matchRoute(currentLocation, {\n        to: fullRoutePathName,\n        search: route.search,\n        fuzzy,\n        caseSensitive: route.caseSensitive ?? router.caseSensitive,\n      })\n\n      if (matchParams) {\n        params = {\n          ...params,\n          ...matchParams,\n        }\n      }\n\n      return !!matchParams\n    })\n\n    if (!route) {\n      return\n    }\n\n    const interpolatedPath = interpolatePath(route.path, params)\n    pathname = joinPaths([pathname, interpolatedPath])\n\n    const interpolatedId = interpolatePath(route.id, params, true)\n\n    const match: UnloadedMatch<TGenerics> = {\n      id: interpolatedId,\n      route,\n      params,\n      pathname,\n      search: currentLocation.search,\n    }\n\n    matches.push(match)\n\n    if (route.children?.length) {\n      recurse(route.children, match)\n    }\n  }\n\n  recurse(router.routes, router.rootMatch!)\n\n  return matches\n}\n\nfunction interpolatePath(\n  path: string | undefined,\n  params: any,\n  leaveWildcard?: boolean,\n) {\n  const interpolatedPathSegments = parsePathname(path)\n\n  return joinPaths(\n    interpolatedPathSegments.map((segment) => {\n      if (segment.value === '*' && !leaveWildcard) {\n        return ''\n      }\n\n      if (segment.type === 'param') {\n        return params![segment.value.substring(1)] ?? ''\n      }\n\n      return segment.value\n    }),\n  )\n}\n\nexport type UseLoadRouteType<\n  TGenerics extends PartialGenerics = DefaultGenerics,\n> = (routes?: Route<TGenerics>[]) => void\n\nexport function useLoadRoute<\n  TGenerics extends PartialGenerics = DefaultGenerics,\n>() {\n  const location = useLocation<TGenerics>()\n  const match = useMatch<TGenerics>()\n  const router = useRouter<TGenerics>()\n  const buildNext = useBuildNext<TGenerics>()\n\n  return useLatestCallback(\n    async (\n      navigate: NavigateOptions<TGenerics> = location.current,\n      opts?: { maxAge?: number },\n    ) => {\n      const next = buildNext({\n        ...navigate,\n        from: navigate.from ?? { pathname: match.pathname },\n      })\n\n      const matchLoader = new MatchLoader(router, next)\n\n      return await matchLoader.load(opts)\n    },\n  )\n}\n\nexport type UseMatchesType<\n  TGenerics extends PartialGenerics = DefaultGenerics,\n> = () => RouteMatch<TGenerics>[]\n\nexport function useParentMatches<\n  TGenerics extends PartialGenerics = DefaultGenerics,\n>(): RouteMatch<TGenerics>[] {\n  const router = useRouter<TGenerics>()\n  const match = useMatch()\n\n  const matches = router.state.matches\n\n  return matches.slice(0, matches.findIndex((d) => d.id === match.id) - 1)\n}\n\nexport function useMatches<\n  TGenerics extends PartialGenerics = DefaultGenerics,\n>(): RouteMatch<TGenerics>[] {\n  return React.useContext(MatchesContext)\n}\n\nexport type UseMatchType<TGenerics extends PartialGenerics = DefaultGenerics> =\n  () => RouteMatch<TGenerics>\n\nexport function useMatch<\n  TGenerics extends PartialGenerics = DefaultGenerics,\n>(): RouteMatch<TGenerics> {\n  return useMatches<TGenerics>()?.[0]!\n}\n\nexport type UseNavigateType<\n  TGenerics extends PartialGenerics = DefaultGenerics,\n> = (options: NavigateOptions<TGenerics>) => void\n\nexport function useNavigate<\n  TGenerics extends PartialGenerics = DefaultGenerics,\n>() {\n  const location = useLocation<TGenerics>()\n  const match = useMatch<TGenerics>()\n  const buildNext = useBuildNext<TGenerics>()\n\n  function navigate({\n    search,\n    hash,\n    replace,\n    from,\n    to,\n    fromCurrent,\n  }: NavigateOptions<TGenerics> & {\n    replace?: boolean\n  }) {\n    fromCurrent = fromCurrent ?? typeof to === 'undefined'\n\n    const next = buildNext({\n      to,\n      search,\n      hash,\n      from: fromCurrent\n        ? location.current\n        : from ?? { pathname: match.pathname },\n    })\n\n    location.navigate(next, replace)\n  }\n\n  return useLatestCallback(navigate)\n}\n\nexport type NavigateType<TGenerics extends PartialGenerics = DefaultGenerics> =\n  (options: NavigateOptions<TGenerics>) => null\n\nexport function Navigate<TGenerics extends PartialGenerics = DefaultGenerics>(\n  options: NavigateOptions<TGenerics>,\n) {\n  let navigate = useNavigate<TGenerics>()\n\n  useLayoutEffect(() => {\n    navigate(options)\n  }, [navigate])\n\n  return null\n}\n\nfunction useBuildNext<TGenerics>() {\n  const location = useLocation<TGenerics>()\n  const router = useRouter<TGenerics>()\n\n  const buildNext = (opts: BuildNextOptions<TGenerics>) => {\n    const next = location.buildNext(router.basepath, opts)\n\n    const matches = matchRoutes<TGenerics>(router, next)\n\n    const __searchFilters = matches\n      .map((match) => match.route.searchFilters ?? [])\n      .flat()\n      .filter(Boolean)\n\n    return location.buildNext(router.basepath, { ...opts, __searchFilters })\n  }\n\n  return useLatestCallback(buildNext)\n}\n\nexport type LinkType<TGenerics extends PartialGenerics = DefaultGenerics> = (\n  props: LinkProps<TGenerics>,\n) => JSX.Element\n\nexport const Link = function Link<\n  TGenerics extends PartialGenerics = DefaultGenerics,\n>({\n  to = '.',\n  search,\n  hash,\n  children,\n  target,\n  style = {},\n  replace,\n  onClick,\n  onMouseEnter,\n  className = '',\n  getActiveProps = () => ({}),\n  activeOptions,\n  preload,\n  disabled,\n  _ref,\n  ...rest\n}: LinkProps<TGenerics>) {\n  const loadRoute = useLoadRoute<TGenerics>()\n  const match = useMatch<TGenerics>()\n  const location = useLocation<TGenerics>()\n  const router = useRouter<TGenerics>()\n  const navigate = useNavigate<TGenerics>()\n  const buildNext = useBuildNext<TGenerics>()\n\n  preload = preload ?? router.defaultLinkPreloadMaxAge\n\n  // If this `to` is a valid external URL, log a warning\n  try {\n    const url = new URL(`${to}`)\n    warning(\n      false,\n      `<Link /> should not be used for external URLs like: ${url.href}`,\n    )\n  } catch (e) {}\n\n  const next = buildNext({\n    to,\n    search,\n    hash,\n    from: { pathname: match.pathname },\n  })\n\n  // The click handler\n  const handleClick = (e: React.MouseEvent<HTMLAnchorElement>) => {\n    if (onClick) onClick(e)\n\n    if (\n      !isCtrlEvent(e) &&\n      !e.defaultPrevented &&\n      (!target || target === '_self') &&\n      e.button === 0\n    ) {\n      e.preventDefault()\n      // All is well? Navigate!\n      navigate({\n        to,\n        search,\n        hash,\n        replace,\n        from: { pathname: match.pathname },\n      })\n    }\n  }\n\n  // The click handler\n  const handleMouseEnter = (e: React.MouseEvent<HTMLAnchorElement>) => {\n    if (onMouseEnter) onMouseEnter(e)\n\n    if (preload && preload > 0) {\n      loadRoute(\n        {\n          to,\n          search,\n          hash,\n        },\n        { maxAge: preload },\n      )\n    }\n  }\n\n  // Compare path/hash for matches\n  const pathIsEqual = location.current.pathname === next.pathname\n  const currentPathSplit = location.current.pathname.split('/')\n  const nextPathSplit = next.pathname.split('/')\n  const pathIsFuzzyEqual = nextPathSplit.every(\n    (d, i) => d === currentPathSplit[i],\n  )\n  const hashIsEqual = location.current.hash === next.hash\n\n  // Combine the matches based on user options\n  const pathTest = activeOptions?.exact ? pathIsEqual : pathIsFuzzyEqual\n  const hashTest = activeOptions?.includeHash ? hashIsEqual : true\n\n  // The final \"active\" test\n  const isActive = pathTest && hashTest\n\n  // Get the active props\n  const {\n    style: activeStyle = {},\n    className: activeClassName = '',\n    ...activeRest\n  } = isActive ? getActiveProps() : {}\n\n  return (\n    <a\n      {...{\n        ref: _ref,\n        href: disabled ? undefined : next.href,\n        onClick: handleClick,\n        onMouseEnter: handleMouseEnter,\n        target,\n        style: {\n          ...style,\n          ...activeStyle,\n        },\n        className:\n          [className, activeClassName].filter(Boolean).join(' ') || undefined,\n        ...(disabled\n          ? {\n              role: 'link',\n              'aria-disabled': true,\n            }\n          : undefined),\n        ...rest,\n        ...activeRest,\n        children:\n          typeof children === 'function' ? children({ isActive }) : children,\n      }}\n    />\n  )\n}\n\nexport function Outlet<TGenerics extends PartialGenerics = DefaultGenerics>() {\n  const router = useRouter<TGenerics>()\n  const [_, ...matches] = useMatches<TGenerics>()\n\n  const match = matches[0]\n\n  if (!match) {\n    return null\n  }\n\n  const errorElement = match.errorElement ?? router.defaultErrorElement\n\n  const element = (() => {\n    if (match.status === 'rejected') {\n      if (errorElement) {\n        return errorElement\n      }\n\n      if (!router.useErrorBoundary) {\n        if (process.env.NODE_ENV !== 'production') {\n          const preStyle: React.HTMLAttributes<HTMLPreElement>['style'] = {\n            whiteSpace: 'normal',\n            display: 'inline-block',\n            background: 'rgba(0,0,0,.1)',\n            padding: '.1rem .2rem',\n            margin: '.1rem',\n            lineHeight: '1',\n            borderRadius: '.25rem',\n          }\n\n          return (\n            <div style={{ lineHeight: '1.7' }}>\n              <strong>\n                The following error occured in the loader for you route at:{' '}\n                <pre style={preStyle}>{match.pathname}</pre>\n              </strong>\n              .\n              <br />\n              <pre\n                style={{\n                  ...preStyle,\n                  display: 'block',\n                  padding: '.5rem',\n                  borderRadius: '.5rem',\n                }}\n              >\n                {(match.error as any).toString()}\n              </pre>\n              <br />\n              Your users won't see this message in production, but they will see{' '}\n              <strong>\"An unknown error occured!\"</strong>, which is at least\n              better than breaking your entire app. 😊 For a better UX, please\n              specify an <pre style={preStyle}>errorElement</pre> for all of\n              your routes that contain asynchronous behavior, or at least\n              provide your own\n              <pre style={preStyle}>ErrorBoundary</pre> wrapper around your\n              renders to both the elements rendered by{' '}\n              <pre style={preStyle}>\n                {'useRoutes(routes, { useErrorBoundary: true })'}\n              </pre>{' '}\n              and <pre style={preStyle}>{'<Router useErrorBoundary />'}</pre>.{' '}\n              <br />\n              <br />\n            </div>\n          )\n        }\n        return 'An unknown error occured!'\n      }\n\n      throw match.error\n    }\n\n    const pendingElement = match.pendingElement ?? router.defaultPendingElement\n\n    if (match.status === 'pending') {\n      if (match.route.pendingMs || pendingElement) {\n        return pendingElement ?? null\n      }\n    }\n\n    const matchElement = match.element ?? router.defaultElement\n\n    return matchElement ?? <Outlet />\n  })()\n\n  return <MatchesProvider value={matches}>{element}</MatchesProvider>\n}\n\nexport function useResolvePath<\n  TGenerics extends PartialGenerics = DefaultGenerics,\n>() {\n  const router = useRouter<TGenerics>()\n  const match = useMatch<TGenerics>()\n\n  return useLatestCallback((path: string) =>\n    resolvePath(router.basepath!, match.pathname!, cleanPath(path)),\n  )\n}\n\nexport type UseSearchType<TGenerics extends PartialGenerics = DefaultGenerics> =\n  () => Partial<Maybe<TGenerics['Search'], Search<any>>>\n\nexport function useSearch<\n  TGenerics extends PartialGenerics = DefaultGenerics,\n>() {\n  const location = useLocation<TGenerics>()\n  return location.current.search\n}\n\nexport type MatchRouteType<\n  TGenerics extends PartialGenerics = DefaultGenerics,\n> = (\n  currentLocation: Location<TGenerics>,\n  matchLocation: MatchLocation<TGenerics>,\n) => UseGeneric<TGenerics, 'Params'> | undefined\n\nexport function matchRoute<TGenerics extends PartialGenerics = DefaultGenerics>(\n  currentLocation: Location<TGenerics>,\n  matchLocation: MatchLocation<TGenerics>,\n): UseGeneric<TGenerics, 'Params'> | undefined {\n  const pathParams = matchByPath(currentLocation, matchLocation)\n  const searchMatched = matchBySearch(currentLocation, matchLocation)\n\n  if (matchLocation.to && !pathParams) {\n    return\n  }\n\n  if (matchLocation.search && !searchMatched) {\n    return\n  }\n\n  return (pathParams ?? {}) as UseGeneric<TGenerics, 'Params'>\n}\n\nexport type UseMatchRouteType<\n  TGenerics extends PartialGenerics = DefaultGenerics,\n> = () => (\n  matchLocation: MatchLocation<TGenerics>,\n) => Maybe<TGenerics['Params'], Params<any>> | undefined\n\nexport type UseMatchRouteOptions<TGenerics> = MatchLocation<TGenerics> & {\n  pending?: boolean\n}\n\nexport function useMatchRoute<\n  TGenerics extends PartialGenerics = DefaultGenerics,\n>(): (\n  matchLocation: UseMatchRouteOptions<TGenerics>,\n  opts?: { caseSensitive?: boolean },\n) => Maybe<TGenerics['Params'], Params<any>> | undefined {\n  const router = useRouter<TGenerics>()\n  const resolvePath = useResolvePath<TGenerics>()\n\n  return useLatestCallback(\n    ({\n      pending,\n      ...matchLocation\n    }: MatchLocation<TGenerics> & { pending?: boolean }) => {\n      matchLocation = {\n        ...matchLocation,\n        to: matchLocation.to ? resolvePath(`${matchLocation.to}`) : undefined,\n      }\n\n      if (pending) {\n        if (!router.pending?.location) {\n          return undefined\n        }\n        return matchRoute(router.pending.location, matchLocation)\n      }\n\n      return matchRoute(router.state.location, matchLocation)\n    },\n  )\n}\n\nexport function MatchRoute<\n  TGenerics extends PartialGenerics = DefaultGenerics,\n>({\n  children,\n  ...rest\n}: UseMatchRouteOptions<TGenerics> & {\n  children:\n    | React.ReactNode\n    | ((isNextLocation?: Params<TGenerics>) => React.ReactNode)\n}) {\n  const matchRoute = useMatchRoute<TGenerics>()\n  const match = matchRoute(rest)\n\n  if (typeof children === 'function') {\n    return children(match as any)\n  }\n\n  return match ? children : null\n}\n\nexport function usePrompt(message: string, when: boolean | any): void {\n  const location = useLocation()\n\n  React.useEffect(() => {\n    if (!when) return\n\n    let unblock = location.history.block((transition) => {\n      if (window.confirm(message)) {\n        unblock()\n        transition.retry()\n      } else {\n        location.current.pathname = window.location.pathname\n      }\n    })\n\n    return unblock\n  }, [when, location, message])\n}\n\nexport function Prompt({ message, when, children }: PromptProps) {\n  usePrompt(message, when ?? true)\n  return (children ?? null) as React.ReactNode\n}\n\nfunction warning(cond: boolean, message: string) {\n  if (!cond) {\n    if (typeof console !== 'undefined') console.warn(message)\n\n    try {\n      throw new Error(message)\n    } catch {}\n  }\n}\n\nfunction isFunction(d: any): d is Function {\n  return typeof d === 'function'\n}\n\nexport function functionalUpdate<TResult>(\n  updater?: Updater<TResult>,\n  previous?: TResult,\n) {\n  if (isFunction(updater)) {\n    return updater(previous as TResult)\n  }\n\n  return updater\n}\n\nfunction joinPaths(paths: (string | undefined)[]) {\n  return cleanPath(paths.filter(Boolean).join('/'))\n}\n\nexport function cleanPath(path: string) {\n  // remove double slashes\n  return `${path}`.replace(/\\/{2,}/g, '/')\n}\n\nexport function matchByPath<\n  TGenerics extends PartialGenerics = DefaultGenerics,\n>(\n  currentLocation: Location<TGenerics>,\n  matchLocation: MatchLocation<TGenerics>,\n): UseGeneric<TGenerics, 'Params'> | undefined {\n  const baseSegments = parsePathname(currentLocation.pathname)\n  const routeSegments = parsePathname(`${matchLocation.to ?? '*'}`)\n\n  // console.log(baseSegments, routeSegments)\n\n  const params: Record<string, string> = {}\n\n  let isMatch = (() => {\n    for (\n      let i = 0;\n      i < Math.max(baseSegments.length, routeSegments.length);\n      i++\n    ) {\n      const baseSegment = baseSegments[i]\n      const routeSegment = routeSegments[i]\n\n      const isLastRouteSegment = i === routeSegments.length - 1\n      const isLastBaseSegment = i === baseSegments.length - 1\n\n      if (routeSegment) {\n        if (routeSegment.type === 'wildcard') {\n          if (baseSegment?.value) {\n            params['*'] = joinPaths(baseSegments.slice(i).map((d) => d.value))\n            return true\n          }\n          return false\n        }\n\n        if (routeSegment.type === 'pathname') {\n          if (routeSegment.value === '/' && !baseSegment?.value) {\n            return true\n          }\n\n          if (baseSegment) {\n            if (matchLocation.caseSensitive) {\n              if (routeSegment.value !== baseSegment.value) {\n                return false\n              }\n            } else if (\n              routeSegment.value.toLowerCase() !==\n              baseSegment.value.toLowerCase()\n            ) {\n              return false\n            }\n          }\n        }\n\n        if (!baseSegment) {\n          return false\n        }\n\n        if (routeSegment.type === 'param') {\n          params[routeSegment.value.substring(1)] = baseSegment.value\n        }\n      }\n\n      if (isLastRouteSegment && !isLastBaseSegment) {\n        return !!matchLocation.fuzzy\n      }\n    }\n    return true\n  })()\n\n  return isMatch ? (params as UseGeneric<TGenerics, 'Params'>) : undefined\n}\n\nfunction matchBySearch<TGenerics extends PartialGenerics = DefaultGenerics>(\n  currentLocation: Location<TGenerics>,\n  matchLocation: MatchLocation<TGenerics>,\n) {\n  return !!(\n    matchLocation.search && matchLocation.search(currentLocation.search)\n  )\n}\n\nexport function parsePathname(pathname?: string): Segment[] {\n  if (!pathname) {\n    return []\n  }\n\n  pathname = cleanPath(pathname)\n\n  const segments: Segment[] = []\n\n  if (pathname.slice(0, 1) === '/') {\n    pathname = pathname.substring(1)\n    segments.push({\n      type: 'pathname',\n      value: '/',\n    })\n  }\n\n  if (!pathname) {\n    return segments\n  }\n\n  // Remove empty segments and '.' segments\n  const split = pathname.split('/').filter(Boolean)\n\n  segments.push(\n    ...split.map((part): Segment => {\n      if (part.startsWith('*')) {\n        return {\n          type: 'wildcard',\n          value: part,\n        }\n      }\n\n      if (part.charAt(0) === ':') {\n        return {\n          type: 'param',\n          value: part,\n        }\n      }\n\n      return {\n        type: 'pathname',\n        value: part,\n      }\n    }),\n  )\n\n  if (pathname.slice(-1) === '/') {\n    pathname = pathname.substring(1)\n    segments.push({\n      type: 'pathname',\n      value: '/',\n    })\n  }\n\n  return segments\n}\n\nfunction resolvePath(basepath: string, base: string, to: string) {\n  base = base.replace(new RegExp(`^${basepath}`), '/')\n  to = to.replace(new RegExp(`^${basepath}`), '/')\n\n  let baseSegments = parsePathname(base)\n  const toSegments = parsePathname(to)\n\n  toSegments.forEach((toSegment, index) => {\n    if (toSegment.value === '/') {\n      if (!index) {\n        baseSegments = [toSegment]\n      } else {\n        // ignore inter-slashes\n      }\n    } else if (toSegment.value === '..') {\n      baseSegments.pop()\n    } else if (toSegment.value === '.') {\n      return\n    } else {\n      baseSegments.push(toSegment)\n    }\n  })\n\n  const joined = joinPaths([basepath, ...baseSegments.map((d) => d.value)])\n\n  return cleanPath(joined)\n}\n\nfunction isCtrlEvent(e: React.MouseEvent) {\n  return !!(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey)\n}\n\nfunction useLatestCallback<TCallback extends (...args: any[]) => any>(\n  cb: TCallback,\n) {\n  const stableFnRef =\n    React.useRef<(...args: Parameters<TCallback>) => ReturnType<TCallback>>()\n  const cbRef = React.useRef<TCallback>(cb)\n\n  cbRef.current = cb\n\n  if (!stableFnRef.current) {\n    stableFnRef.current = (...args) => cbRef.current(...args)\n  }\n\n  return stableFnRef.current\n}\n\nfunction useGetIsMounted() {\n  const ref = React.useRef(false)\n\n  React.useEffect(() => {\n    ref.current = true\n\n    return () => {\n      ref.current = false\n    }\n  })\n\n  return () => ref.current\n}\n\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\nfunction replaceEqualDeep(prev: any, next: any) {\n  if (prev === next) {\n    return prev\n  }\n\n  const array = Array.isArray(prev) && Array.isArray(next)\n\n  if (array || (isPlainObject(prev) && isPlainObject(next))) {\n    const aSize = array ? prev.length : Object.keys(prev).length\n    const bItems = array ? next : Object.keys(next)\n    const bSize = bItems.length\n    const copy: any = array ? [] : {}\n\n    let equalItems = 0\n\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i]\n      copy[key] = replaceEqualDeep(prev[key], next[key])\n      if (copy[key] === prev[key]) {\n        equalItems++\n      }\n    }\n\n    return aSize === bSize && equalItems === aSize ? prev : copy\n  }\n\n  return next\n}\n\n// Copied from: https://github.com/jonschlinkert/is-plain-object\nfunction isPlainObject(o: any) {\n  if (!hasObjectPrototype(o)) {\n    return false\n  }\n\n  // If has modified constructor\n  const ctor = o.constructor\n  if (typeof ctor === 'undefined') {\n    return true\n  }\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (!hasObjectPrototype(prot)) {\n    return false\n  }\n\n  // If constructor does not have an Object-specific method\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false\n  }\n\n  // Most likely a plain Object\n  return true\n}\n\nfunction hasObjectPrototype(o: any) {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport function defaultStringifySearch(search: Record<string, unknown>) {\n  search = { ...search }\n\n  if (search) {\n    Object.keys(search).forEach((key) => {\n      const val = search[key]\n      if (typeof val === 'undefined' || val === undefined) {\n        delete search[key]\n      } else if (val && typeof val === 'object' && val !== null) {\n        try {\n          search[key] = JSON.stringify(val)\n        } catch (err) {\n          // silent\n        }\n      }\n    })\n  }\n\n  const searchStr = new URLSearchParams(\n    search as Record<string, string>,\n  ).toString()\n\n  return searchStr ? `?${searchStr}` : ''\n}\n\nexport function defaultParseSearch(searchStr: string): Record<string, any> {\n  if (searchStr.substring(0, 1) === '?') {\n    searchStr = searchStr.substring(1)\n  }\n\n  let query: Record<string, unknown> = Object.fromEntries(\n    (new URLSearchParams(searchStr) as any).entries(),\n  )\n\n  // Try to parse query params\n  for (let key in query) {\n    const value = query[key]\n\n    try {\n      query[key] = JSON.parse(value as string)\n    } catch (err) {\n      //\n    }\n  }\n\n  return query\n}\n"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","LocationContext","React","createContext","MatchesContext","routerContext","isDOM","Boolean","window","document","createElement","useLayoutEffect","useEffect","Subscribable","listeners","subscribe","listener","push","_this","filter","x","notify","payload","forEach","ReactLocation","options","isTransitioning","history","createBrowserHistory","createMemoryHistory","stringifySearch","defaultStringifySearch","parseSearch","defaultParseSearch","current","_this2","parseLocation","location","destroy","listen","event","buildNext","basepath","dest","from","pathname","resolvePath","to","updatedSearch","search","functionalUpdate","filteredSearch","__searchFilters","reduce","prev","next","replaceEqualDeep","searchStr","hash","href","navigate","replace","navigateTimeout","clearTimeout","nextAction","setTimeout","_this3","previousLocation","parsedSearch","split","reverse","MatchesProvider","props","Provider","RouterInstance","rest","routesById","update","routes","opts","cleanPath","recurseRoutes","parent","map","route","path","id","joinPaths","pendingMs","defaultPendingMs","pendingMinMs","defaultPendingMinMs","_this4","Error","children","undefined","rootMatch","params","ownData","data","isLoading","status","setState","updater","newState","state","pending","cleanMatchCache","matchCache","activeMatchIds","_assertThisInitialize2","matches","_assertThisInitialize4","_assertThisInitialize5","d","values","match","updatedAt","includes","age","Date","now","maxAge","updateLocation","unsubscribe","promise","Promise","resolve","matchLoader","MatchLoader","old","currentMatches","find","dd","onExit","onTransition","onMatch","loadData","startPending","useLocation","ref","getIsMounted","useRef","rerender","useReducer","instance","useContext","then","RouteMatch","unloadedMatch","isSoft","_this5","assignMatchLoader","pendingTimeout","pendingMinPromise","r","load","loaderMaxAge","router","defaultLoaderMaxAge","loaderPromise","importer","import","imported","elementPromises","type","routeElement","res","loader","dataPromise","resolveLoader","rejectLoader","reject","finish","error","err","console","$Try_1_Post","$error","$Try_1_Catch","parentMatch","dispatch","$await_6","all","nextLocation","preNotify","_this6","index","_this6$matches","firstRenderPromises","_this6$matches2","unloadedMatches","matchRoutes","useRouter","value","currentLocation","recurse","filterRoutes","fullRoutePathName","fuzzy","_route$children2","matchParams","matchRoute","caseSensitive","interpolatedPath","interpolatePath","_route$children3","leaveWildcard","parsePathname","segment","substring","useLoadRoute","useMatch","useBuildNext","useLatestCallback","useMatches","_useMatches","useNavigate","fromCurrent","searchFilters","flat","Outlet","errorElement","defaultErrorElement","element","useErrorBoundary","pendingElement","defaultPendingElement","matchElement","defaultElement","useResolvePath","matchLocation","pathParams","matchByPath","searchMatched","matchBySearch","useMatchRoute","_router$pending","usePrompt","message","when","unblock","block","transition","confirm","retry","previous","paths","join","baseSegments","routeSegments","Math","max","baseSegment","routeSegment","isLastRouteSegment","isLastBaseSegment","slice","toLowerCase","segments","part","startsWith","charAt","base","RegExp","toSegment","pop","cb","stableFnRef","cbRef","array","Array","isArray","isPlainObject","aSize","keys","bItems","bSize","copy","equalItems","o","hasObjectPrototype","ctor","constructor","prot","toString","val","JSON","stringify","URLSearchParams","query","fromEntries","entries","parse","style","onClick","onMouseEnter","className","getActiveProps","activeOptions","preload","disabled","_ref","loadRoute","defaultLinkPreloadMaxAge","URL","e","pathIsEqual","currentPathSplit","pathIsFuzzyEqual","every","hashIsEqual","pathTest","exact","hashTest","includeHash","isActive","activeStyle","activeClassName","activeRest","metaKey","altKey","ctrlKey","shiftKey","isCtrlEvent","defaultPrevented","button","preventDefault","role","routerRef","nonce","routerValue","useMemo","findIndex"],"mappings":"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"}